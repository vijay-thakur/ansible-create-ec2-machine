---
- name: Playbook to create EC2 instance, Key Pair and Security Group
  hosts: local
  connection: local
  gather_facts: False
  vars:
    ansible_python_interpreter: /usr/bin/python3

  vars_prompt:
    - name: "region"
      prompt: "Enter the aws region"
      default: ap-southeast-1
      private: no
    
    - name: "instance_type"
      prompt: "Enter the instance category like t2.micro"
      default: t2.micro
      private: no

    - name: "ami"
      prompt: "Enter the ami name to launch EC2 instance, default install ubuntu 18.04"
      default: ami-0dad20bd1b9c8c004   # Ubuntu 18.04 LTS
      private: no
    
    - name: "keypair"
      prompt: "Enter the key pair to connect EC2 instance using EC2 key"
      private: no   ## PEM file name

    - name: "security_group"
      prompt: "Enter Security Group name, which we want to create"
      private: no

    - name: "count"
      prompt: "Enter the number to create number of instances"
      default: 1
      private: no

    - name: "vpc_subent_id"
      prompt: "Enter the vpc public subnet id to assign public address to EC2 instance"
      private: no

    - name: "destination"
      prompt: "Enter the destination path to store EC2 key pair"
      default: ./aws.nixcraft.pem
      private: no

    - name: "host_group_name"
      prompt: "Enter the host group name to add into inventory file"
      default: "[webserver]"
      private: no

  tasks:

    - name: Create New security group
      local_action:
        module: ec2_group
        name: "{{ security_group }}"
        description: Security Group for Newly Created EC2 Instance
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create a new EC2 key pair
      ec2_key:
          name="{{ keypair }}"
          region="{{ region }}"
      register: ec2_key_result

    - name: Save private key on your local machine on specific destination
      copy: content="{{ ec2_key_result.key.private_key }}" dest="{{ destination }}" mode=0600
      when: ec2_key_result.changed


    - name: Launch the new EC2 instance
      ec2:
          key_name: "{{ keypair }}"
          group: "{{ security_group }}"
          instance_type: "{{ instance_type }}"
          image: "{{ ami }}"
          wait: true
          region: "{{ region }}"
          count: "{{ count }}"
          monitoring: no
          vpc_subnet_id: "{{ vpc_subent_id }}"
          assign_public_ip: yes
      register: ec2
    

    - name: Wait for EC2 Instance to Spin-up and ready for SSH access
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        delay: 60
        timeout: 300
        state: started
      with_items: "{{ ec2.instances }}"

    
    - name: Adding Tags to Instances
      ec2_tag:
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: present
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Name: Test Server
          Owner: Test
          PurPose: Testing EC2 Instance From Ansible

    - name: "Searching for a hostgroup String in inventory file"
      lineinfile:
        dest: "/etc/ansible/hosts"
        line:  "{{ host_group_name }}"
        state: present
      register: presence

    - name: Add the hostgroup to inventory file
      lineinfile:
        dest: "/etc/ansible/hosts"
        regexp: "{{ item.public_ip }}"
        insertafter: "localhost"     
        line: "{{ host_group_name }}"
      with_items: "{{ ec2.instances }}"
      when: presence is not success

    - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
      lineinfile:
        dest: "/et/ansible/hosts"
        regexp: "{{ item.public_ip }}"
        insertafter: "{{ host_group_name }}"
        line: "{{ item.public_ip }}"
      with_items: "{{ ec2.instances }}"


    - name: Add the newly created host to in memory so that we can further contact it
      add_host:
        name: "{{ item.public_ip }}"
        ansible_host: "{{ item.public_ip }}"
        ansible_port: 22
        ansible_user: ubuntu
        ansible_private_key_file: "{{ destination }}"
      with_items: "{{ ec2.instances }}"
  

    - name: Install python-minimal
      delegate_to: "{{ item.public_ip }}"
      raw: sudo bash -c "test -e /usr/bin/python || (apt -qqy update && apt install -qy python-minimal)"
      with_items: "{{ ec2.instances }}"
